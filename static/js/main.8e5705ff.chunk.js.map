{"version":3,"sources":["components/UserCard/UserCard.tsx","components/CommentCard/CommentCard.tsx","components/CommentsList/CommentsList.tsx","components/PostCard/PostCard.tsx","components/PostList/PostList.tsx","helpers/api.ts","App.tsx","index.tsx"],"names":["UserCard","user","className","key","id","name","email","address","city","street","suite","CommentCard","comment","body","CommentsList","commentsList","map","PostCard","post","title","PostList","posts","users","comments","find","userId","filter","postId","getAll","url","fetch","then","response","json","App","useState","setUsers","setPosts","setCommnets","isLoaded","setIsLoaded","isLoading","setIsLoading","errorMessage","setErrorMessage","filteredPosts","setFilteredPosts","filterQuery","setFilterQuery","handleClick","a","postsFromServer","usersFromServer","commentsFromServer","type","value","onChange","event","target","setTimeout","toLowerCase","includes","onClick","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8e5705ff.chunk.js","sourcesContent":["import React from 'react'\nimport { User } from '../../helpers/api';\nimport './UserCard.css';\n\ntype Props = {\n  user: User;\n}\n\nexport const UserCard: React.FC<Props> = ({ user }) => (\n  <div className=\"post__autor user\" key={user.id}>\n    <div className=\"user__info\">\n      <span className=\"user__info-decor\">Autor: </span>\n      {user.name}\n    </div>\n    <div className=\"user__info\">\n      <span className=\"user__info-decor\">Email: </span>\n      {user.email}\n    </div>\n    <div className=\"user__info\">\n      <span className=\"user__info-decor\">Address: </span>\n      {user.address.city}\n      ,{' '}\n      {user.address.street}\n      ,{' '}\n      {user.address.suite}\n    </div>\n  </div>\n)\n","import React from 'react';\nimport { Comment } from '../../helpers/api';\nimport './CommentCard.css';\n\ntype Props = {\n  comment: Comment;\n}\n\nexport const CommentCard: React.FC<Props> = ({ comment }) => (\n  <li className=\"post__comment comment\">\n    <h3 className=\"comment__title\">\n      {comment.name}\n    </h3>\n    <p className=\"comment__text\">\n      {comment.body}\n    </p>\n    <span className=\"comment__email\">\n      {comment.email}\n    </span>\n  </li>\n);\n","import React from 'react';\nimport { Comment } from '../../helpers/api';\nimport { CommentCard } from '../CommentCard/CommentCard';\n\ntype Props = {\n  commentsList: Comment[];\n}\n\nexport const CommentsList: React.FC<Props> = ({ commentsList }) => (\n  <ul>\n    {commentsList.map((comment: Comment) => (\n      <CommentCard comment={comment} key={comment.id} />\n    ))}\n  </ul>\n)\n","import React from 'react';\nimport { Post, User, Comment } from '../../helpers/api';\nimport { UserCard } from '../UserCard/UserCard';\nimport { CommentsList } from '../CommentsList/CommentsList';\nimport './PostCard.css';\n\ntype Props =  {\n  post: Post;\n  user: User;\n  commentsList: Comment[];\n}\n\nexport const PostCard: React.FC<Props> = ({ post, user, commentsList }) => (\n  <li className=\"post-list__post post\">\n    <h2 className=\"post__title\">{post.title}</h2>\n    <p className=\"post__text\">{post.body}</p>\n    <UserCard user={user} />\n    <CommentsList commentsList={commentsList} />\n  </li>\n)\n","import React from 'react';\nimport { Post, User, Comment } from '../../helpers/api';\nimport { PostCard } from '../PostCard/PostCard';\n\ntype Props = {\n  posts: Post[];\n  users: User[];\n  comments: Comment[];\n}\n\nexport const PostList: React.FC<Props> = ({ posts, users, comments }) => (\n  <ul>\n    {posts.map((post: Post) => {\n\n      const user = users.find((user: User) => (\n        user.id === post.userId));\n      const commentsList = comments.filter((comment: Comment) => (\n        comment.postId === post.id\n        ));\n\n      return (\n        user && (\n          <PostCard\n          post={post}\n          user={user}\n          commentsList={commentsList}\n          key={post.id} />\n        )\n      )}\n    )}\n  </ul>\n);\n","const API_URL = 'https://mate-academy.github.io/react_dynamic-list-of-posts/api';\n\nexport interface User {\n  id: number;\n  name: string;\n  surname: string;\n  email: string;\n  address: {\n    city: string;\n    street: string;\n    suite: string;\n  }\n}\n\nexport interface Post {\n  userId: number;\n  id: number;\n  title: string;\n  body: string;\n}\n\nexport interface Comment {\n  postId: number;\n  id: number;\n  name: string;\n  email: string;\n  body: string;\n}\n\nconst getAll = <T>(url: string): Promise<T[]> => {\n  return fetch(API_URL + url).then(response => response.json());\n}\n\nexport const getUsers = () => getAll<User>('/users.json');\nexport const getPosts = () => getAll<Post>('/posts.json');\nexport const getComments = () => getAll<Comment>('/comments.json');\n\n","import React, { useState } from 'react';\nimport './App.css';\nimport { PostList } from './components/PostList/PostList';\n\nimport {\n  getUsers,\n  getPosts,\n  getComments,\n  User,\n  Post,\n  Comment } from './helpers/api';\n\nexport const App = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [comments, setCommnets] = useState<Comment[]>([]);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [filteredPosts, setFilteredPosts] = useState<Post[]>([]);\n  const [filterQuery, setFilterQuery] = useState('');\n\n  const handleClick = async () => {\n    setIsLoading(true);\n\n    try {\n      const postsFromServer = await getPosts();\n      const usersFromServer = await getUsers();\n      const commentsFromServer = await getComments();\n\n      setPosts(postsFromServer);\n      setFilteredPosts(postsFromServer);\n      setUsers(usersFromServer);\n      setCommnets(commentsFromServer);\n      setIsLoaded(true);\n      setErrorMessage('');\n    } catch (exeption) {\n      setErrorMessage('Error');\n    }\n\n    setIsLoading(false);\n  }\n\n  const changeFilterInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setFilterQuery(event.target.value);\n\n    setTimeout(() => {\n      setFilteredPosts(posts.filter(({ title, body }) => (title + body)\n        .toLowerCase()\n        .includes(filterQuery.toLowerCase())));\n    }, 1000);\n  }\n\n  const resetFilter = () => {\n    setFilteredPosts(posts);\n    setFilterQuery('');\n  }\n\n\n  return (\n    <section className=\"post-list\">\n      <h1 className=\"post-list__title\">Dynamic list of posts</h1>\n\n      {!isLoaded ? (\n      <>\n        <button\n          type=\"button\"\n          onClick={handleClick}\n          disabled={isLoading}\n        >\n          {isLoading ? `Loading...` : `Load`}\n        </button>\n        {errorMessage && (<p>{errorMessage}</p>)}\n      </>\n      ) : (\n        <>\n          <div>\n            <input\n              type=\"textarea\"\n              className=\"post-list__filter\"\n              value={filterQuery}\n              onChange={changeFilterInput}\n            />\n            <button\n              type=\"button\"\n              onClick={resetFilter}\n            >\n              Reset\n            </button>\n          </div>\n\n          <PostList\n            posts={filteredPosts}\n            users={users}\n            comments={comments}\n          />\n        </>\n\n      )}\n    </section>\n  )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}
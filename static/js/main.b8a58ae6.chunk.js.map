{"version":3,"sources":["components/UserCard/UserCard.tsx","components/CommentCard/CommentCard.tsx","components/CommentsList/CommentsList.tsx","components/PostCard/PostCard.tsx","components/PostList/PostList.tsx","helpers/api.ts","App.tsx","index.tsx"],"names":["UserCard","id","name","email","address","className","key","city","street","suite","CommentCard","comment","body","CommentsList","commentsList","map","PostCard","post","title","user","comments","PostList","posts","getData","url","fetch","then","response","json","App","useState","setPosts","isLoaded","setIsLoaded","isLoading","setIsLoading","errorMessage","setErrorMessage","filterQuery","setFilterQuery","handleClick","a","postsFromServer","usersFromServer","commentsFromServer","modifiedPostList","find","userId","filter","postId","visiblePosts","useMemo","toLowerCase","includes","filterPosts","type","value","onChange","event","target","onClick","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b8a58ae6.chunk.js","sourcesContent":["import React from 'react'\nimport { User } from '../../helpers/api';\nimport './UserCard.css';\n\ntype Props = User;\n\nexport const UserCard: React.FC<Props> = ({ id, name, email, address }) => (\n  <div className=\"post__autor user\" key={id}>\n    <div className=\"user__info\">\n      <span className=\"user__info-decor\">Autor: </span>\n      {name}\n    </div>\n    <div className=\"user__info\">\n      <span className=\"user__info-decor\">Email: </span>\n      {email}\n    </div>\n    <div className=\"user__info\">\n      <span className=\"user__info-decor\">Address: </span>\n      {address.city}\n      ,{' '}\n      {address.street}\n      ,{' '}\n      {address.suite}\n    </div>\n  </div>\n)\n","import React from 'react';\nimport { Comment } from '../../helpers/api';\nimport './CommentCard.css';\n\ntype Props = {\n  comment: Comment;\n}\n\nexport const CommentCard: React.FC<Props> = ({ comment }) => (\n  <li className=\"post__comment comment\">\n    <h3 className=\"comment__title\">\n      {comment.name}\n    </h3>\n    <p className=\"comment__text\">\n      {comment.body}\n    </p>\n    <span className=\"comment__email\">\n      {comment.email}\n    </span>\n  </li>\n);\n","import React from 'react';\nimport { Comment } from '../../helpers/api';\nimport { CommentCard } from '../CommentCard/CommentCard';\n\ntype Props = {\n  commentsList: Comment[];\n}\n\nexport const CommentsList: React.FC<Props> = ({ commentsList }) => (\n  <ul>\n    {commentsList.map((comment: Comment) => (\n      <CommentCard comment={comment} key={comment.id} />\n    ))}\n  </ul>\n)\n","import React from 'react';\nimport { Post } from '../../helpers/api';\nimport { UserCard } from '../UserCard/UserCard';\nimport { CommentsList } from '../CommentsList/CommentsList';\nimport './PostCard.css';\n\ntype Props =  {\n  post: Post;\n}\n\nexport const PostCard: React.FC<Props> = ({ post }) => (\n  <li className=\"post-list__post post\">\n    <h2 className=\"post__title\">{post.title}</h2>\n    <p className=\"post__text\">{post.body}</p>\n    {post.user && <UserCard {...post.user} />}\n    {post.comments && <CommentsList commentsList={post.comments} />}\n  </li>\n)\n","import React from 'react';\nimport { Post } from '../../helpers/api';\nimport { PostCard } from '../PostCard/PostCard';\n\ntype Props = {\n  posts: Post[];\n}\n\nexport const PostList: React.FC<Props> = ({ posts }) => (\n  <ul>\n    {posts.map((post: Post) => (\n      <PostCard\n          post={post}\n          key={post.id}\n      />\n    ))}\n  </ul>\n);\n","const API_URL = 'https://mate-academy.github.io/react_dynamic-list-of-posts/api';\n\nexport interface User {\n  id: number;\n  name: string;\n  surname: string;\n  email: string;\n  address: {\n    city: string;\n    street: string;\n    suite: string;\n  }\n}\n\nexport interface Comment {\n  postId: number;\n  id: number;\n  name: string;\n  email: string;\n  body: string;\n}\n\nexport interface Post {\n  userId: number;\n  id: number;\n  title: string;\n  body: string;\n  user?: User;\n  comments?: Comment[];\n}\n\nconst getData = <T>(url: string): Promise<T[]> => {\n  return fetch(API_URL + url).then(response => response.json());\n}\n\nexport const getUsers = () => getData<User>('/users.json');\nexport const getPosts = () => getData<Post>('/posts.json');\nexport const getComments = () => getData<Comment>('/comments.json');\n\n","import React, { useState, useMemo } from 'react';\nimport './App.css';\nimport { PostList } from './components/PostList/PostList';\n\nimport {\n  getUsers,\n  getPosts,\n  getComments,\n  User,\n  Post,\n  Comment\n} from './helpers/api';\n\nexport const App = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [filterQuery, setFilterQuery] = useState('');\n\n  const handleClick = async () => {\n    setIsLoading(true);\n\n    try {\n      const postsFromServer = await getPosts();\n      const usersFromServer = await getUsers();\n      const commentsFromServer = await getComments();\n\n      const modifiedPostList = postsFromServer.map((post: Post) => ({\n        ...post,\n        user: usersFromServer.find((user: User) => user.id === post.userId),\n        comments: commentsFromServer.filter((comment: Comment) =>\n          comment.postId === post.id),\n      }));\n\n      setPosts(modifiedPostList);\n      setIsLoaded(true);\n      setErrorMessage('');\n    } catch (exeption) {\n      setErrorMessage('Error');\n      setIsLoading(false);\n    }\n\n    setIsLoading(false);\n  }\n\n  const changeFilterInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setFilterQuery(event.target.value);\n  }\n\n  const resetFilter = () => {\n    setFilterQuery('');\n  }\n\n  const filterPosts = (filterQuery: string, posts: Post[]) => (\n    posts.filter(({ title, body }) =>\n      (title + body).toLowerCase().includes(filterQuery.toLowerCase()))\n  );\n\n  const visiblePosts = useMemo(() => filterPosts(filterQuery, posts), [\n    filterQuery,\n    posts,\n  ]);\n\n  return (\n    <section className=\"post-list\">\n      <h1 className=\"post-list__title\">Dynamic list of posts</h1>\n\n      {!isLoaded ? (\n      <>\n        <button\n          type=\"button\"\n          onClick={handleClick}\n          disabled={isLoading}\n        >\n          {isLoading ? `Loading...` : `Load`}\n        </button>\n        {errorMessage && (<p>{errorMessage}</p>)}\n      </>\n      ) : (\n        <>\n          <div>\n            <input\n              type=\"textarea\"\n              className=\"post-list__filter\"\n              value={filterQuery}\n              onChange={changeFilterInput}\n            />\n            <button\n              type=\"button\"\n              onClick={resetFilter}\n            >\n              Reset\n            </button>\n          </div>\n\n          <PostList\n            posts={visiblePosts}\n          />\n        </>\n\n      )}\n    </section>\n  )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}